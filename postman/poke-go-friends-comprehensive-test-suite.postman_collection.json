{
  "info": {
    "_postman_id": "poke-go-friends-comprehensive-collection",
    "name": "Pokemon Go Friends API - Comprehensive Test Suite",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Comprehensive test suite for Pokemon Go Friend Code Sharing API. This collection includes exhaustive testing for all endpoints, edge cases, error scenarios, and performance validation.",
    "_exporter_id": "comprehensive-test-suite"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "createdFriendCodeId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testFriendCode",
      "value": "123456789012",
      "type": "string"
    },
    {
      "key": "testTrainerName",
      "value": "TestTrainer",
      "type": "string"
    },
    {
      "key": "randomFriendCode",
      "value": "",
      "type": "string"
    },
    {
      "key": "currentTimestamp",
      "value": "",
      "type": "string"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set dynamic variables for testing",
          "pm.collectionVariables.set('currentTimestamp', Date.now());",
          "pm.collectionVariables.set('randomFriendCode', String(Math.floor(Math.random() * 900000000000) + 100000000000));",
          "pm.collectionVariables.set('testTrainerName', 'TestTrainer' + Math.floor(Math.random() * 10000));",
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test assertions that apply to all requests",
          "pm.test('Response time is acceptable (< 5s)', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('No server errors (5xx)', function () {",
          "    pm.expect(pm.response.code).to.be.below(500);",
          "});",
          "",
          "// Content-Type validation for JSON responses",
          "if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
          "    pm.test('Content-Type is application/json', function () {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    });",
          "    ",
          "    pm.test('Response is valid JSON', function () {",
          "        pm.expect(() => pm.response.json()).to.not.throw();",
          "    });",
          "}",
          "",
          "// Standard error response validation",
          "if (pm.response.code >= 400) {",
          "    pm.test('Error response has standard format', function () {",
          "        const response = pm.response.json();",
          "        pm.expect(response).to.have.property('status');",
          "        pm.expect(response).to.have.property('error');",
          "        pm.expect(response).to.have.property('message');",
          "        pm.expect(response).to.have.property('timestamp');",
          "        pm.expect(response).to.have.property('path');",
          "    });",
          "}",
          ""
        ]
      }
    }
  ],
  "item": [
    {
      "name": "üè• Health Endpoints",
      "description": "Comprehensive tests for application health monitoring endpoints",
      "item": [
        {
          "name": "Health Check - Basic",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Health check returns 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health response is an object', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Health response contains status', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "});",
                  "",
                  "pm.test('Health status is UP when healthy', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.status).to.eql('UP');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Health response may contain components', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.components) {",
                  "        pm.expect(response.components).to.be.an('object');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            },
            "description": "Basic health check endpoint that returns overall application health status"
          }
        },
        {
          "name": "Readiness Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Readiness check returns 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Readiness response is an object', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Readiness check indicates application is ready', function () {",
                  "    // Application is ready if it returns 200",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/health/ready",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health", "ready"]
            },
            "description": "Kubernetes readiness probe endpoint"
          }
        },
        {
          "name": "Liveness Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Liveness check returns 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Liveness response is an object', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Liveness check indicates application is alive', function () {",
                  "    // Application is alive if it returns 200",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/health/live",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health", "live"]
            },
            "description": "Kubernetes liveness probe endpoint"
          }
        }
      ]
    },
    {
      "name": "‚ûï Friend Code Creation",
      "description": "Tests for creating new friend codes with various validation scenarios",
      "item": [
        {
          "name": "Submit Friend Code - Valid Complete Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Friend code created successfully with 201 status', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains all required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('friendCode');",
                  "    pm.expect(response).to.have.property('trainerName');",
                  "    pm.expect(response).to.have.property('isActive');",
                  "    pm.expect(response).to.have.property('createdAt');",
                  "    pm.expect(response).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Friend code matches submitted value', function () {",
                  "    const response = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(response.friendCode.replace(/[\\s-]/g, '')).to.eql(requestBody.friendCode.replace(/[\\s-]/g, ''));",
                  "});",
                  "",
                  "pm.test('Trainer name matches submitted value', function () {",
                  "    const response = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(response.trainerName).to.eql(requestBody.trainerName);",
                  "});",
                  "",
                  "pm.test('Player level matches submitted value', function () {",
                  "    const response = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(response.playerLevel).to.eql(requestBody.playerLevel);",
                  "});",
                  "",
                  "pm.test('Location matches submitted value', function () {",
                  "    const response = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(response.location).to.eql(requestBody.location);",
                  "});",
                  "",
                  "pm.test('Team matches submitted value', function () {",
                  "    const response = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(response.team.toLowerCase()).to.eql(requestBody.team.toLowerCase());",
                  "});",
                  "",
                  "pm.test('Goals match submitted values', function () {",
                  "    const response = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(response.goals).to.be.an('array');",
                  "    pm.expect(response.goals).to.have.lengthOf(requestBody.goals.length);",
                  "});",
                  "",
                  "pm.test('Friend code is active by default', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.isActive).to.be.true;",
                  "});",
                  "",
                  "pm.test('Timestamps are valid ISO dates', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(new Date(response.createdAt)).to.be.a('date');",
                  "    pm.expect(new Date(response.updatedAt)).to.be.a('date');",
                  "    pm.expect(response.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
                  "});",
                  "",
                  "pm.test('ID is a positive number', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.be.a('number');",
                  "    pm.expect(response.id).to.be.greaterThan(0);",
                  "});",
                  "",
                  "// Store the created friend code ID for subsequent tests",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('createdFriendCodeId', response.id);",
                  "    console.log('Created friend code with ID:', response.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"friendCode\": \"{{randomFriendCode}}\",\n  \"trainerName\": \"{{testTrainerName}}\",\n  \"playerLevel\": 40,\n  \"location\": \"Pallet Town, Kanto\",\n  \"description\": \"Looking for active friends for daily gifts and raid invites!\",\n  \"team\": \"valor\",\n  \"goals\": [\"exp\", \"raids\", \"gifts\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Submit a complete friend code with all optional fields filled"
          }
        },
        {
          "name": "Submit Friend Code - Minimal Valid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Minimal friend code created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('friendCode');",
                  "    pm.expect(response).to.have.property('isActive');",
                  "});",
                  "",
                  "pm.test('Optional fields are null or empty when not provided', function () {",
                  "    const response = pm.response.json();",
                  "    // These might be null or empty strings depending on implementation",
                  "    if (response.trainerName !== null) {",
                  "        pm.expect(response.trainerName).to.be.a('string');",
                  "    }",
                  "    if (response.location !== null) {",
                  "        pm.expect(response.location).to.be.a('string');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"friendCode\": \"{{$randomInt}}{{$randomInt}}{{$randomInt}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Submit friend code with only the required friendCode field"
          }
        },
        {
          "name": "Submit Friend Code - Different Format (With Spaces)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Friend code with spaces accepted', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Friend code stored correctly regardless of format', function () {",
                  "    const response = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    // Should match after removing spaces/dashes",
                  "    pm.expect(response.friendCode.replace(/[\\s-]/g, '')).to.eql(requestBody.friendCode.replace(/[\\s-]/g, ''));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"friendCode\": \"1234 5678 9012\",\n  \"trainerName\": \"SpacedCodeTrainer\",\n  \"playerLevel\": 25\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Test friend code submission with spaces in the friend code"
          }
        },
        {
          "name": "Submit Friend Code - Different Format (With Dashes)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Friend code with dashes accepted', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Friend code stored correctly regardless of format', function () {",
                  "    const response = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(response.friendCode.replace(/[\\s-]/g, '')).to.eql(requestBody.friendCode.replace(/[\\s-]/g, ''));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"friendCode\": \"4321-8765-0192\",\n  \"trainerName\": \"DashedCodeTrainer\",\n  \"playerLevel\": 30\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Test friend code submission with dashes in the friend code"
          }
        }
      ]
    },
    {
      "name": "‚ùå Validation Error Tests",
      "description": "Tests for various validation error scenarios",
      "item": [
        {
          "name": "Submit Friend Code - Missing Friend Code",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 400 for missing friend code', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error response contains required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response.status).to.eql(400);",
                  "});",
                  "",
                  "pm.test('Error message indicates friend code is required', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message.toLowerCase()).to.include('friend');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"trainerName\": \"TestTrainer\",\n  \"playerLevel\": 40,\n  \"location\": \"Test City\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Test validation when friendCode field is missing"
          }
        },
        {
          "name": "Submit Friend Code - Empty Friend Code",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 400 for empty friend code', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates validation failure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.status).to.eql(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"friendCode\": \"\",\n  \"trainerName\": \"TestTrainer\",\n  \"playerLevel\": 40\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Test validation when friendCode is empty string"
          }
        },
        {
          "name": "Submit Friend Code - Invalid Format (Too Short)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 400 for short friend code', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error response indicates validation failure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.status).to.eql(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"friendCode\": \"123\",\n  \"trainerName\": \"TestTrainer\",\n  \"playerLevel\": 40\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Test validation with friend code that's too short"
          }
        },
        {
          "name": "Submit Friend Code - Invalid Format (Too Long)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 400 for long friend code', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error response indicates validation failure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.status).to.eql(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"friendCode\": \"12345678901234567890\",\n  \"trainerName\": \"TestTrainer\",\n  \"playerLevel\": 40\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Test validation with friend code that's too long"
          }
        },
        {
          "name": "Submit Friend Code - Invalid Format (Contains Letters)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 400 for non-numeric friend code', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error response indicates validation failure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.status).to.eql(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"friendCode\": \"123abc789def\",\n  \"trainerName\": \"TestTrainer\",\n  \"playerLevel\": 40\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Test validation with friend code containing non-numeric characters"
          }
        },
        {
          "name": "Submit Friend Code - Invalid Player Level (Too High)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 400 for player level above 50', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates validation failure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.status).to.eql(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"friendCode\": \"999888777666\",\n  \"trainerName\": \"TestTrainer\",\n  \"playerLevel\": 99\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Test validation with player level above maximum (50)"
          }
        },
        {
          "name": "Submit Friend Code - Invalid Player Level (Too Low)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 400 for player level below 1', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates validation failure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.status).to.eql(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"friendCode\": \"888777666555\",\n  \"trainerName\": \"TestTrainer\",\n  \"playerLevel\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Test validation with player level below minimum (1)"
          }
        },
        {
          "name": "Submit Friend Code - Invalid Team",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 400 for invalid team', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates validation failure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.status).to.eql(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"friendCode\": \"777666555444\",\n  \"trainerName\": \"TestTrainer\",\n  \"playerLevel\": 30,\n  \"team\": \"rocket\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Test validation with invalid team (should be mystic, valor, or instinct)"
          }
        },
        {
          "name": "Submit Friend Code - Invalid Goals",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 400 for invalid goals', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates validation failure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.status).to.eql(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"friendCode\": \"666555444333\",\n  \"trainerName\": \"TestTrainer\",\n  \"playerLevel\": 30,\n  \"goals\": [\"invalid_goal\", \"also_invalid\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Test validation with invalid goals (should be gifts, exp, raids, or all)"
          }
        },
        {
          "name": "Submit Friend Code - Trainer Name Too Long",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 400 for trainer name too long', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates validation failure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.status).to.eql(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"friendCode\": \"555444333222\",\n  \"trainerName\": \"ThisTrainerNameIsWayTooLongAndExceedsTheMaximumAllowedLengthForTrainerNamesInTheSystem\",\n  \"playerLevel\": 30\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Test validation with trainer name exceeding maximum length (100 characters)"
          }
        },
        {
          "name": "Submit Friend Code - Trainer Name Too Short",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 400 for trainer name too short', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates validation failure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.status).to.eql(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"friendCode\": \"444333222111\",\n  \"trainerName\": \"A\",\n  \"playerLevel\": 30\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Test validation with trainer name below minimum length (2 characters)"
          }
        },
        {
          "name": "Submit Friend Code - Invalid JSON",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 400 for invalid JSON', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates JSON parsing failure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.status).to.eql(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"friendCode\": \"333222111000\"\n  \"trainerName\": \"TestTrainer\"\n  // Missing comma - invalid JSON\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Test with malformed JSON body"
          }
        },
        {
          "name": "Submit Friend Code - Duplicate",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 409 for duplicate friend code', function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test('Error response indicates conflict', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.status).to.eql(409);",
                  "});",
                  "",
                  "pm.test('Error message indicates duplicate', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message.toLowerCase()).to.include('exist');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"friendCode\": \"{{randomFriendCode}}\",\n  \"trainerName\": \"DuplicateTrainer\",\n  \"playerLevel\": 35\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Test submitting a friend code that already exists (using the same random code from the first successful submission)"
          }
        }
      ]
    },
    {
      "name": "üìñ Friend Code Retrieval",
      "description": "Tests for retrieving friend codes with various filters and pagination",
      "item": [
        {
          "name": "Get Friend Codes - Default Parameters",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Successfully retrieves friend codes with 200 status', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('content');",
                  "    pm.expect(response).to.have.property('page');",
                  "    pm.expect(response).to.have.property('size');",
                  "    pm.expect(response).to.have.property('totalElements');",
                  "    pm.expect(response).to.have.property('totalPages');",
                  "    pm.expect(response).to.have.property('first');",
                  "    pm.expect(response).to.have.property('last');",
                  "    pm.expect(response).to.have.property('empty');",
                  "});",
                  "",
                  "pm.test('Content is an array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.content).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Page information is correct', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.page).to.be.a('number');",
                  "    pm.expect(response.size).to.be.a('number');",
                  "    pm.expect(response.totalElements).to.be.a('number');",
                  "    pm.expect(response.totalPages).to.be.a('number');",
                  "    pm.expect(response.first).to.be.a('boolean');",
                  "    pm.expect(response.last).to.be.a('boolean');",
                  "    pm.expect(response.empty).to.be.a('boolean');",
                  "});",
                  "",
                  "pm.test('Friend code objects have required fields', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.content.length > 0) {",
                  "        const friendCode = response.content[0];",
                  "        pm.expect(friendCode).to.have.property('id');",
                  "        pm.expect(friendCode).to.have.property('friendCode');",
                  "        pm.expect(friendCode).to.have.property('isActive');",
                  "        pm.expect(friendCode).to.have.property('createdAt');",
                  "        pm.expect(friendCode).to.have.property('updatedAt');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Only active friend codes are returned by default', function () {",
                  "    const response = pm.response.json();",
                  "    response.content.forEach(friendCode => {",
                  "        pm.expect(friendCode.isActive).to.be.true;",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Get friend codes with default pagination (page=0, size=20)"
          }
        },
        {
          "name": "Get Friend Codes - Custom Pagination",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns correct page number', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.page).to.eql(1);",
                  "});",
                  "",
                  "pm.test('Returns correct page size', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.size).to.eql(5);",
                  "});",
                  "",
                  "pm.test('Content array respects size limit', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.content.length).to.be.at.most(5);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes?page=1&size=5",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "size",
                  "value": "5"
                }
              ]
            },
            "description": "Test custom pagination parameters"
          }
        },
        {
          "name": "Get Friend Codes - Sorting by createdAt desc",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Friend codes are sorted by creation date descending', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.content.length > 1) {",
                  "        for (let i = 0; i < response.content.length - 1; i++) {",
                  "            const current = new Date(response.content[i].createdAt);",
                  "            const next = new Date(response.content[i + 1].createdAt);",
                  "            pm.expect(current.getTime()).to.be.at.least(next.getTime());",
                  "        }",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes?sortBy=createdAt&sortDir=desc",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"],
              "query": [
                {
                  "key": "sortBy",
                  "value": "createdAt"
                },
                {
                  "key": "sortDir",
                  "value": "desc"
                }
              ]
            },
            "description": "Test sorting functionality"
          }
        },
        {
          "name": "Get Friend Codes - Filter by Location",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('All returned friend codes match location filter', function () {",
                  "    const response = pm.response.json();",
                  "    response.content.forEach(friendCode => {",
                  "        if (friendCode.location) {",
                  "            pm.expect(friendCode.location.toLowerCase()).to.include('new york');",
                  "        }",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes?location=New York",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"],
              "query": [
                {
                  "key": "location",
                  "value": "New York"
                }
              ]
            },
            "description": "Test location filtering"
          }
        },
        {
          "name": "Get Friend Codes - Filter by Level Range",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('All returned friend codes are within level range', function () {",
                  "    const response = pm.response.json();",
                  "    response.content.forEach(friendCode => {",
                  "        if (friendCode.playerLevel) {",
                  "            pm.expect(friendCode.playerLevel).to.be.at.least(30);",
                  "            pm.expect(friendCode.playerLevel).to.be.at.most(40);",
                  "        }",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes?minLevel=30&maxLevel=40",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"],
              "query": [
                {
                  "key": "minLevel",
                  "value": "30"
                },
                {
                  "key": "maxLevel",
                  "value": "40"
                }
              ]
            },
            "description": "Test level range filtering"
          }
        },
        {
          "name": "Get Friend Codes - Search Filter",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Search results contain the search term', function () {",
                  "    const response = pm.response.json();",
                  "    const searchTerm = 'gift';",
                  "    response.content.forEach(friendCode => {",
                  "        const found = (friendCode.trainerName && friendCode.trainerName.toLowerCase().includes(searchTerm)) ||",
                  "                     (friendCode.description && friendCode.description.toLowerCase().includes(searchTerm));",
                  "        pm.expect(found).to.be.true;",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes?search=gift",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"],
              "query": [
                {
                  "key": "search",
                  "value": "gift"
                }
              ]
            },
            "description": "Test search functionality"
          }
        },
        {
          "name": "Get Friend Codes - Invalid Page Size (Too Large)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 400 for page size exceeding maximum', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message indicates invalid page size', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message.toLowerCase()).to.include('size');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes?size=1000",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"],
              "query": [
                {
                  "key": "size",
                  "value": "1000"
                }
              ]
            },
            "description": "Test validation for page size exceeding maximum (100)"
          }
        },
        {
          "name": "Get Friend Codes - Invalid Parameters",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 400 for invalid parameters', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message indicates validation failure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes?page=-1&minLevel=60",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"],
              "query": [
                {
                  "key": "page",
                  "value": "-1"
                },
                {
                  "key": "minLevel",
                  "value": "60"
                }
              ]
            },
            "description": "Test validation with invalid page number and level values"
          }
        }
      ]
    },
    {
      "name": "üîç Individual Friend Code Operations",
      "description": "Tests for operations on specific friend codes (GET, PUT, DELETE by ID)",
      "item": [
        {
          "name": "Get Friend Code by ID - Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Successfully retrieves friend code by ID', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains expected friend code fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('friendCode');",
                  "    pm.expect(response).to.have.property('isActive');",
                  "    pm.expect(response).to.have.property('createdAt');",
                  "    pm.expect(response).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Returned ID matches requested ID', function () {",
                  "    const response = pm.response.json();",
                  "    const requestedId = pm.collectionVariables.get('createdFriendCodeId');",
                  "    if (requestedId) {",
                  "        pm.expect(response.id).to.eql(parseInt(requestedId));",
                  "    }",
                  "});",
                  "",
                  "pm.test('Friend code is in valid format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.friendCode).to.be.a('string');",
                  "    pm.expect(response.friendCode.replace(/[\\s-]/g, '')).to.have.lengthOf(12);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes/{{createdFriendCodeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes", "{{createdFriendCodeId}}"]
            },
            "description": "Retrieve a specific friend code using the ID from the creation test"
          }
        },
        {
          "name": "Get Friend Code by ID - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 404 for non-existent friend code', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response indicates not found', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.status).to.eql(404);",
                  "});",
                  "",
                  "pm.test('Error message indicates friend code not found', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message.toLowerCase()).to.include('not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes/999999",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes", "999999"]
            },
            "description": "Test retrieval of non-existent friend code"
          }
        },
        {
          "name": "Update Friend Code - Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Friend code updated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated fields reflect new values', function () {",
                  "    const response = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(response.trainerName).to.eql(requestBody.trainerName);",
                  "    pm.expect(response.playerLevel).to.eql(requestBody.playerLevel);",
                  "    pm.expect(response.description).to.eql(requestBody.description);",
                  "});",
                  "",
                  "pm.test('updatedAt timestamp is newer than createdAt', function () {",
                  "    const response = pm.response.json();",
                  "    const createdAt = new Date(response.createdAt);",
                  "    const updatedAt = new Date(response.updatedAt);",
                  "    pm.expect(updatedAt.getTime()).to.be.at.least(createdAt.getTime());",
                  "});",
                  "",
                  "pm.test('ID and friend code remain unchanged', function () {",
                  "    const response = pm.response.json();",
                  "    const expectedId = pm.collectionVariables.get('createdFriendCodeId');",
                  "    if (expectedId) {",
                  "        pm.expect(response.id).to.eql(parseInt(expectedId));",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"trainerName\": \"{{testTrainerName}}_Updated\",\n  \"playerLevel\": 45,\n  \"description\": \"Updated description - now looking for PvP battles and raids!\",\n  \"team\": \"mystic\",\n  \"goals\": [\"raids\", \"exp\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes/{{createdFriendCodeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes", "{{createdFriendCodeId}}"]
            },
            "description": "Update an existing friend code with new information"
          }
        },
        {
          "name": "Update Friend Code - Partial Update",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Partial update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Only specified fields are updated', function () {",
                  "    const response = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(response.playerLevel).to.eql(requestBody.playerLevel);",
                  "    // Other fields should remain from previous update or original creation",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"playerLevel\": 47\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes/{{createdFriendCodeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes", "{{createdFriendCodeId}}"]
            },
            "description": "Test partial update with only one field"
          }
        },
        {
          "name": "Update Friend Code - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 404 for updating non-existent friend code', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error indicates friend code not found', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message.toLowerCase()).to.include('not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"trainerName\": \"UpdatedName\",\n  \"playerLevel\": 50\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes/999999",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes", "999999"]
            },
            "description": "Test updating a non-existent friend code"
          }
        },
        {
          "name": "Update Friend Code - Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 400 for invalid update data', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates validation failure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.status).to.eql(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"playerLevel\": 999,\n  \"team\": \"invalid_team\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes/{{createdFriendCodeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes", "{{createdFriendCodeId}}"]
            },
            "description": "Test update with invalid data (level too high, invalid team)"
          }
        },
        {
          "name": "Delete Friend Code - Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Friend code deactivated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: This might deactivate rather than delete",
                  "pm.test('Response indicates successful operation', function () {",
                  "    // Could be empty response or confirmation message",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes/{{createdFriendCodeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes", "{{createdFriendCodeId}}"]
            },
            "description": "Deactivate/delete the friend code created in earlier tests"
          }
        },
        {
          "name": "Delete Friend Code - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Returns 404 for deleting non-existent friend code', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error indicates friend code not found', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message.toLowerCase()).to.include('not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes/999999",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes", "999999"]
            },
            "description": "Test deleting a non-existent friend code"
          }
        },
        {
          "name": "Verify Deletion - Friend Code Should Be Inactive",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Friend code still exists but is inactive', function () {",
                  "    // Depending on implementation, this might return the friend code as inactive",
                  "    // or return 404 if soft-deleted items are hidden",
                  "    if (pm.response.code === 200) {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response.isActive).to.be.false;",
                  "    } else if (pm.response.code === 404) {",
                  "        pm.test('Friend code not found after deletion', function () {",
                  "            pm.response.to.have.status(404);",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes/{{createdFriendCodeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes", "{{createdFriendCodeId}}"]
            },
            "description": "Verify that the deleted friend code is no longer active/accessible"
          }
        }
      ]
    },
    {
      "name": "üîé Search Functionality",
      "description": "Tests for advanced search capabilities",
      "item": [
        {
          "name": "Search Friend Codes - By Trainer Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Search returns results successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('content');",
                  "    pm.expect(response.content).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Search results match trainer name criteria', function () {",
                  "    const response = pm.response.json();",
                  "    const searchTerm = 'test';",
                  "    response.content.forEach(friendCode => {",
                  "        if (friendCode.trainerName) {",
                  "            pm.expect(friendCode.trainerName.toLowerCase()).to.include(searchTerm);",
                  "        }",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes/search?trainerName=test",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes", "search"],
              "query": [
                {
                  "key": "trainerName",
                  "value": "test"
                }
              ]
            },
            "description": "Search friend codes by trainer name"
          }
        },
        {
          "name": "Search Friend Codes - Multiple Criteria",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Multi-criteria search works correctly', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search results match criteria', function () {",
                  "    const response = pm.response.json();",
                  "    response.content.forEach(friendCode => {",
                  "        if (friendCode.playerLevel) {",
                  "            pm.expect(friendCode.playerLevel).to.be.at.least(35);",
                  "            pm.expect(friendCode.playerLevel).to.be.at.most(50);",
                  "        }",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes/search?minLevel=35&maxLevel=50",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes", "search"],
              "query": [
                {
                  "key": "minLevel",
                  "value": "35"
                },
                {
                  "key": "maxLevel",
                  "value": "50"
                }
              ]
            },
            "description": "Search with multiple criteria"
          }
        }
      ]
    },
    {
      "name": "‚è∞ Recent Friend Codes",
      "description": "Tests for retrieving recently submitted friend codes",
      "item": [
        {
          "name": "Get Recent Friend Codes - Default (24 hours)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Recent friend codes retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('content');",
                  "    pm.expect(response.content).to.be.an('array');",
                  "    pm.expect(response).to.have.property('page');",
                  "    pm.expect(response).to.have.property('size');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes/recent",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes", "recent"]
            },
            "description": "Get friend codes from the last 24 hours (default)"
          }
        },
        {
          "name": "Get Recent Friend Codes - Custom Time Range",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Custom time range parameter accepted', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response structure is correct', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('content');",
                  "    pm.expect(response.content).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes/recent?hours=12",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes", "recent"],
              "query": [
                {
                  "key": "hours",
                  "value": "12"
                }
              ]
            },
            "description": "Get friend codes from the last 12 hours"
          }
        }
      ]
    },
    {
      "name": "üìä Statistics Endpoint",
      "description": "Tests for the statistics endpoint",
      "item": [
        {
          "name": "Get Friend Code Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Statistics retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Statistics response is an object', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Statistics contain numeric values', function () {",
                  "    const response = pm.response.json();",
                  "    // Check that any numeric properties are indeed numbers",
                  "    Object.keys(response).forEach(key => {",
                  "        if (typeof response[key] === 'number') {",
                  "            pm.expect(response[key]).to.be.at.least(0);",
                  "        }",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes", "stats"]
            },
            "description": "Retrieve statistics about friend codes in the system"
          }
        }
      ]
    },
    {
      "name": "üöÄ Performance & Load Tests",
      "description": "Tests for performance characteristics and load handling",
      "item": [
        {
          "name": "Large Page Size Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Large page size handled efficiently', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});",
                  "",
                  "pm.test('Response time acceptable for large requests', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Large response structure is correct', function () {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response).to.have.property('content');",
                  "        pm.expect(response.content).to.be.an('array');",
                  "        pm.expect(response.content.length).to.be.at.most(100);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes?size=100",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"],
              "query": [
                {
                  "key": "size",
                  "value": "100"
                }
              ]
            },
            "description": "Test performance with maximum allowed page size"
          }
        }
      ]
    },
    {
      "name": "üîê Security & Edge Cases",
      "description": "Tests for security aspects and edge case handling",
      "item": [
        {
          "name": "SQL Injection Prevention Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('SQL injection attempt handled safely', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "    pm.expect(pm.response.code).to.not.be.oneOf([500, 503]);",
                  "});",
                  "",
                  "pm.test('No sensitive data leaked in response', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.not.include('select');",
                  "    pm.expect(responseText.toLowerCase()).to.not.include('database');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes/search?trainerName=' OR '1'='1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes", "search"],
              "query": [
                {
                  "key": "trainerName",
                  "value": "' OR '1'='1"
                }
              ]
            },
            "description": "Test protection against SQL injection"
          }
        },
        {
          "name": "Invalid Content-Type Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Invalid content-type handled appropriately', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 415]);",
                  "});",
                  "",
                  "pm.test('Error response is well-formed', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "This is not JSON content"
            },
            "url": {
              "raw": "{{baseUrl}}/api/friend-codes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "friend-codes"]
            },
            "description": "Test handling of incorrect Content-Type"
          }
        }
      ]
    }
  ]
}